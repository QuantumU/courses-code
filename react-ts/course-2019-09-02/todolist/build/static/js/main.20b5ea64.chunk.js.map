{"version":3,"sources":["components/TodoItem.tsx","components/TodoList.tsx","components/AddTodo.tsx","components/About.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoItem","handleClick","props","onCompleted","todo","id","handleDelete","clickEvent","stopPropagation","onDelete","className","this","completed","onClick","title","Button","variant","color","Component","TodoList","todos","map","key","AddTodo","onAddTodo","useState","setTitle","shouldRedirect","setShouldRedirect","onSubmit","event","preventDefault","TextField","label","value","onChange","target","margin","type","to","About","App","setTodos","installPrompt","setInstallPrompt","useEffect","window","addEventListener","e","handleCompleted","filter","handleAddTodo","highestId","reduce","accumulator","Math","max","activeClassName","exact","path","render","component","prompt","userChoice","then","choiceResult","outcome","console","log","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.20b5ea64.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport TodoType from \"../TodoType\";\nimport \"./TodoItem.css\";\nimport Button from \"@material-ui/core/Button\";\n\ntype TodoItemProps = {\n  todo: TodoType;\n  onCompleted: (id: number) => void;\n  onDelete: (id: number) => void;\n};\n\nclass TodoItem extends Component<TodoItemProps> {\n  render() {\n    return (\n      <div\n        className={this.props.todo.completed ? \"todo completed\" : \"todo\"}\n        onClick={this.handleClick}\n      >\n        <span className=\"label\">\n          {this.props.todo.completed ? \"DONE\" : \"TODO\"}: {this.props.todo.title}\n        </span>{\" \"}\n        <Button onClick={this.handleDelete} variant=\"contained\" color=\"primary\">\n          X\n        </Button>\n      </div>\n    );\n  }\n\n  handleClick = () => {\n    this.props.onCompleted(this.props.todo.id);\n  };\n\n  handleDelete = (clickEvent: React.MouseEvent<HTMLButtonElement>) => {\n    clickEvent.stopPropagation();\n    this.props.onDelete(this.props.todo.id);\n  };\n}\n\nexport default TodoItem;\n","import React from \"react\";\nimport TodoType from \"../TodoType\";\nimport TodoItem from \"./TodoItem\";\n\ntype TodoListProps = {\n  todos: Array<TodoType>;\n  onCompleted: (id: number) => void;\n  onDelete: (id: number) => void;\n};\n\nconst TodoList: React.FC<TodoListProps> = ({ todos, onCompleted, onDelete }) => {\n  return (\n    <div>\n      {todos.map(todo => (\n        <TodoItem\n          todo={todo}\n          key={todo.id}\n          onCompleted={onCompleted}\n          onDelete={onDelete}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default TodoList;\n","import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { Redirect } from \"react-router-dom\";\n\ntype AddTodoProps = {\n  onAddTodo: (title: string) => void;\n};\n\nconst AddTodo: React.FC<AddTodoProps> = ({ onAddTodo }) => {\n  const [title, setTitle] = useState<string>(\"\");\n  const [shouldRedirect, setShouldRedirect] = useState<boolean>(false);\n\n  return (\n    <form\n      onSubmit={event => {\n        // Standardverhalten des Events verhindern\n        // (kein Übermitteln der Formularinhalte an den Server)\n        event.preventDefault();\n        onAddTodo(title);\n        setTitle(\"\");\n        setShouldRedirect(true);\n      }}\n    >\n      <TextField\n        label=\"Todo...\"\n        value={title}\n        onChange={event => {\n          setTitle(event.target.value);\n        }}\n        margin=\"dense\"\n      />\n      <Button type=\"submit\" color=\"primary\" variant=\"contained\">\n        Add\n      </Button>\n      {\n        shouldRedirect && <Redirect to=\"/\" />\n      }\n    </form>\n  );\n};\n\nexport default AddTodo;\n","import React from \"react\";\n\nconst About = () => (\n  <div>\n    <h2>About</h2>\n    <p>Todo App by Marko</p>\n  </div>\n);\n\nexport default About;\n","import React, { useState, useEffect } from \"react\";\nimport TodoList from \"./TodoList\";\nimport TodoType from \"../TodoType\";\nimport AddTodo from \"./AddTodo\";\nimport { Route, NavLink, Switch, Redirect } from \"react-router-dom\";\nimport About from \"./About\";\n\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<Array<TodoType>>([\n    { id: 1, title: \"learn React\", completed: false },\n    { id: 2, title: \"groceries\", completed: true }\n  ]);\n  const [installPrompt, setInstallPrompt] = useState<Event | null>(null);\n\n  useEffect(() => {\n    // wird ausgeführt, wenn die komponente eingebunden wird\n    window.addEventListener(\"beforeinstallprompt\", e => {\n      e.preventDefault();\n      setInstallPrompt(e);\n    });\n  }, []);\n\n  const handleCompleted = (id: number) => {\n    setTodos(\n      todos.map(todo => (todo.id === id ? { ...todo, completed: true } : todo))\n    );\n  };\n\n  const handleDelete = (id: number) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  const handleAddTodo = (title: string) => {\n    const highestId = todos.reduce(\n      (accumulator, todo) => Math.max(accumulator, todo.id),\n      0\n    );\n\n    setTodos([...todos, { id: highestId + 1, title, completed: false }]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Todo</h1>\n      <div>\n        <NavLink to=\"/\" activeClassName=\"active-link\" exact={true}>\n          Home\n        </NavLink>{\" \"}\n        <NavLink to=\"/add\" activeClassName=\"active-link\">\n          Add\n        </NavLink>{\" \"}\n        <NavLink to=\"/about\" activeClassName=\"active-link\">\n          About\n        </NavLink>\n      </div>\n      <Switch>\n        <Route\n          path=\"/\"\n          exact={true}\n          render={() => (\n            <TodoList\n              todos={todos}\n              onCompleted={handleCompleted}\n              onDelete={handleDelete}\n            />\n          )}\n        />\n        <Route\n          path=\"/add\"\n          exact={true}\n          render={() => <AddTodo onAddTodo={handleAddTodo} />}\n        />\n        <Route path=\"/about\" exact={true} component={About} />\n\n        <Route path=\"/home\" exact={true} render={() => <Redirect to=\"/\" />} />\n        <Route\n          path=\"/add-todo\"\n          exact={true}\n          render={() => <Redirect to=\"/add\" />}\n        />\n\n        <Route path=\"/\" render={() => <h2>Not Found</h2>} />\n      </Switch>\n      {installPrompt && (\n        <div>\n          <button\n            onClick={() => {\n              (installPrompt as any).prompt();\n              (installPrompt as any).userChoice.then((choiceResult: any) => {\n                if (choiceResult.outcome === \"accepted\") {\n                  console.log(\"user accepted\");\n                } else {\n                  console.log(\"user dismissed\");\n                }\n                setInstallPrompt(null);\n              });\n            }}\n          >\n            install\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}