{"version":3,"sources":["Rating.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Rating","stars","onChange","map","id","onClick","className","key","initialTodos","title","completed","App","useState","todos","setTodos","loading","setLoading","newTitle","setNewTitle","useEffect","fetch","then","res","json","rating1","setRating1","todoElements","todo","prefix","console","log","Button","event","stopPropagation","filter","onSubmit","preventDefault","newId","Math","max","TextField","value","target","label","color","variant","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0RA4BeA,MArBf,YAAmD,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,SAEvB,OACE,6BAFc,CAAC,EAAG,EAAG,EAAG,EAAG,GAGhBC,KAAI,SAACC,GAAD,OACX,0BACEC,QAAS,WACHH,GACFA,EAASE,IAGbE,UAAW,SAAWL,GAASG,EAAK,SAAW,YAC/CG,IAAKH,GAEJH,GAASG,EAAK,SAAM,eCRzBI,EAA4B,CAChC,CAAEJ,GAAI,EAAGK,MAAO,eAAgBC,WAAW,GAC3C,CAAEN,GAAI,EAAGK,MAAO,YAAaC,WAAW,IA6F3BC,MA1Ff,WAAgB,IAAD,EACaC,mBAAsBJ,GADnC,mBACNK,EADM,KACCC,EADD,OAEiBF,oBAAS,GAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGmBJ,mBAAiB,IAHpC,mBAGNK,EAHM,KAGIC,EAHJ,KAcbC,qBATA,WACEH,GAAW,GACXI,MApBW,8CAqBRC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACR,GACLG,GAAW,GACXF,EAASD,QAGO,IAdT,MAgBiBD,mBAAS,GAhB1B,mBAgBNY,EAhBM,KAgBGC,EAhBH,KA+BPC,EAAeb,EAAMV,KAAI,SAACwB,GAC9B,IAAIC,EAMJ,OAJEA,EADED,EAAKjB,UACE,SAEA,SAGT,wBACEH,IAAKoB,EAAKvB,GACVE,UAAWqB,EAAKjB,UAAY,qBAAuB,WACnDL,QAAS,kBAxBMD,EAwBYuB,EAAKvB,GAvBpCyB,QAAQC,IAAI,WAAY1B,QACxBU,EACED,EAAMV,KAAI,SAACwB,GAAD,OACRA,EAAKvB,KAAOA,EAAZ,2BAAsBuB,GAAtB,IAA4BjB,WAAYiB,EAAKjB,YAAciB,MAJjE,IAAqBvB,IA0BdwB,EAASD,EAAKlB,MACf,kBAACsB,EAAA,EAAD,CACE1B,QAAS,SAAC2B,GAnBlB,IAAsB5B,EAoBZ4B,EAAMC,kBApBM7B,EAqBCuB,EAAKvB,GApB1BU,EAASD,EAAMqB,QAAO,SAACP,GAAD,OAAUA,EAAKvB,KAAOA,QAiBxC,SAYN,OACE,yBAAKE,UAAU,OACb,oCACCS,EAAU,2CAAwB,KACnC,4BAAKW,GACL,0BACES,SAAU,SAACH,GACTA,EAAMI,iBACNlB,EAAY,IACZ,IAAMmB,EAAQC,KAAKC,IAAL,MAAAD,KAAI,YAAQzB,EAAMV,KAAI,SAACwB,GAAD,OAAUA,EAAKvB,OAAjC,QAAsC,KAAK,EAC7DU,EAAS,GAAD,mBACHD,GADG,CAEN,CAAET,GAAIiC,EAAO5B,MAAOQ,EAAUP,WAAW,QAI7C,kBAAC8B,EAAA,EAAD,CACEC,MAAOxB,EACPf,SAAU,SAAC8B,GACTd,EAAYc,EAAMU,OAAOD,QAE3BE,MAAM,aAER,kBAACZ,EAAA,EAAD,CAAQa,MAAM,UAAUC,QAAQ,YAAYC,KAAK,UAAjD,QAKF,kBAAC,EAAD,CAAQ7C,MAAOuB,EAAStB,SAAUuB,MC3FpBsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.0117e32e.chunk.js","sourcesContent":["import React from \"react\";\n\ntype RatingProps = {\n  stars: number;\n  onChange?: (newRating: number) => void;\n};\n\nfunction Rating({ stars, onChange }: RatingProps) {\n  const starIds = [1, 2, 3, 4, 5];\n  return (\n    <div>\n      {starIds.map((id) => (\n        <span\n          onClick={() => {\n            if (onChange) {\n              onChange(id);\n            }\n          }}\n          className={\"star \" + (stars >= id ? \"active\" : \"inactive\")}\n          key={id}\n        >\n          {stars >= id ? \"★\" : \"☆\"}\n        </span>\n      ))}\n    </div>\n  );\n}\n\nexport default Rating;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Button, TextField } from \"@material-ui/core\";\nimport Rating from \"./Rating\";\n\nconst apiUrl = \"https://jsonplaceholder.typicode.com/todos\";\n\ntype Todo = {\n  id: number;\n  title: string;\n  completed: boolean;\n};\n\nconst initialTodos: Array<Todo> = [\n  { id: 1, title: \"React lernen\", completed: false },\n  { id: 2, title: \"Einkaufen\", completed: true },\n];\n\nfunction App() {\n  const [todos, setTodos] = useState<Array<Todo>>(initialTodos);\n  const [loading, setLoading] = useState(false);\n  const [newTitle, setNewTitle] = useState<string>(\"\");\n\n  function fetchTodos() {\n    setLoading(true);\n    fetch(apiUrl)\n      .then((res) => res.json())\n      .then((todos) => {\n        setLoading(false);\n        setTodos(todos);\n      });\n  }\n  useEffect(fetchTodos, []);\n\n  const [rating1, setRating1] = useState(3);\n\n  function handleClick(id: number): void {\n    console.log(\"toggling\", id);\n    setTodos(\n      todos.map((todo) =>\n        todo.id === id ? { ...todo, completed: !todo.completed } : todo\n      )\n    );\n  }\n\n  function handleDelete(id: number): void {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  }\n\n  const todoElements = todos.map((todo) => {\n    let prefix;\n    if (todo.completed) {\n      prefix = \"DONE: \";\n    } else {\n      prefix = \"TODO: \";\n    }\n    return (\n      <li\n        key={todo.id}\n        className={todo.completed ? \"todoitem completed\" : \"todoitem\"}\n        onClick={() => handleClick(todo.id)}\n      >\n        {prefix + todo.title}\n        <Button\n          onClick={(event) => {\n            event.stopPropagation();\n            handleDelete(todo.id);\n          }}\n        >\n          X\n        </Button>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"App\">\n      <h1>Todo</h1>\n      {loading ? <div>loading...</div> : null}\n      <ul>{todoElements}</ul>\n      <form\n        onSubmit={(event) => {\n          event.preventDefault();\n          setNewTitle(\"\");\n          const newId = Math.max(...todos.map((todo) => todo.id), 0) + 1;\n          setTodos([\n            ...todos,\n            { id: newId, title: newTitle, completed: false },\n          ]);\n        }}\n      >\n        <TextField\n          value={newTitle}\n          onChange={(event) => {\n            setNewTitle(event.target.value);\n          }}\n          label=\"new todo\"\n        />\n        <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n          add\n        </Button>\n      </form>\n\n      <Rating stars={rating1} onChange={setRating1} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}